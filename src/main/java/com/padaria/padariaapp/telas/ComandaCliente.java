/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.padaria.padariaapp.telas;

import com.padaria.padariaapp.conexao.CadastroComanda;
import com.padaria.padariaapp.conexao.CadastroComandaProduto;
import com.padaria.padariaapp.conexao.ListarProdutos;
import com.padaria.padariaapp.conexao.ObterPagamentosComanda;
import com.padaria.padariaapp.conexao.UpdateComanda;
import com.padaria.padariaapp.entidades.Comanda;
import com.padaria.padariaapp.entidades.ComandaPagamento;
import com.padaria.padariaapp.entidades.ComandaProduto;
import com.padaria.padariaapp.entidades.Produto;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.table.AbstractTableModel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;
import javax.swing.JFrame;

/**
 *
 * @author Enzo Teves
 */
public class ComandaCliente extends javax.swing.JFrame {

    public  static class ItensProdutosComanda extends AbstractTableModel {
        private List<ComandaProduto> itens = new ArrayList<ComandaProduto>();
        private String[] colunas = {"Produto", "Valor", "Quantidade", "Subtotal"};
        
        public ItensProdutosComanda(){
        }
        
        public ItensProdutosComanda(List<ComandaProduto> itens) {
            this.itens = itens;
        }
        
        @Override
        public int getRowCount() {
            return itens.size();
        }
        
        @Override
        public int getColumnCount() {
            return colunas.length;
        }
        
        @Override
        public String getColumnName(int columnIndex) {
            return colunas[columnIndex];
        }
        
        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            ComandaProduto item = itens.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return item.getProduto().getDescricao();
                case 1:
                    return item.getProduto().getValor();
                case 2:
                    return item.getQuantidade();
                case 3:
                    return item.getSubtotal();
                default:
                    return null;
            }
        }
        
        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            // Torna a coluna "Quantidade" (coluna 2) edit√°vel
            return columnIndex == 2;
        }
        
        @Override
        public void setValueAt(Object value, int rowIndex, int columnIndex) {
            if (columnIndex == 2) {
                ComandaProduto item = itens.get(rowIndex);
                item.setQuantidade(Integer.parseInt((String)value));
                item.setSubtotal(item.getQuantidade() * item.getProduto().getValor());

                //salvar na tabela produto da comanda
                new CadastroComandaProduto().cadastrar(item);
                
                fireTableCellUpdated(rowIndex, columnIndex);
            }
        }
    }
    
    private ItensProdutosComanda itensProdutosComanda = new ItensProdutosComanda();
    private Comanda comanda = new Comanda();
    AtomicReference<Double> totalPagoComanda = new AtomicReference<>(0d);
    
    /**
     * Creates new form Comanda
     */
    public ComandaCliente() {
        initComponents();
        listarProdutos();
        
        comanda.setCodigo(new CadastroComanda().gerarComanda());
        codigoComanda.setText(Integer.toString(comanda.getCodigo()));
    }
    
    private void listarProdutos() {
        ArrayList<Produto> produtos = new ListarProdutos().listar();
        ArrayList<ComandaProduto> comandaProdutos = new ArrayList<>();
        
        produtos.forEach(produto -> {
            ComandaProduto comandaProduto = new ComandaProduto();
            comandaProduto.setComanda(comanda);
            comandaProduto.setProduto(produto);
            comandaProduto.setQuantidade(0);
            comandaProdutos.add(comandaProduto);
        });
        
        itensProdutosComanda.itens.addAll(comandaProdutos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pagamentoComanda = new javax.swing.JButton();
        tituloPaginaComanda = new javax.swing.JLabel();
        codigoComanda = new javax.swing.JTextField();
        labelTotalComanda = new javax.swing.JLabel();
        totalComanda = new javax.swing.JTextField();
        painelProdutos = new javax.swing.JScrollPane();
        tabelaProdutosComanda = new javax.swing.JTable();
        comandaPaga = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pagamentoComanda.setText("Pagamento");
        pagamentoComanda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagamentoComandaActionPerformed(evt);
            }
        });

        tituloPaginaComanda.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tituloPaginaComanda.setText("COMANDA");

        codigoComanda.setEnabled(false);

        labelTotalComanda.setText("TOTAL DA COMANDA");

        totalComanda.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        totalComanda.setEnabled(false);
        totalComanda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalComandaActionPerformed(evt);
            }
        });

        tabelaProdutosComanda.setModel(itensProdutosComanda);
        tabelaProdutosComanda.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tabelaProdutosComandaPropertyChange(evt);
            }
        });
        painelProdutos.setViewportView(tabelaProdutosComanda);

        comandaPaga.setBackground(new java.awt.Color(204, 0, 0));
        comandaPaga.setForeground(new java.awt.Color(255, 255, 255));
        comandaPaga.setText("EM ABERTO");
        comandaPaga.setFocusPainted(false);
        comandaPaga.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tituloPaginaComanda)
                    .addComponent(codigoComanda, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(comandaPaga, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(pagamentoComanda, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(labelTotalComanda)
                            .addGap(268, 268, 268)
                            .addComponent(totalComanda, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tituloPaginaComanda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(codigoComanda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comandaPaga))
                    .addComponent(painelProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalComanda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTotalComanda))
                .addGap(18, 18, 18)
                .addComponent(pagamentoComanda)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void atualizarComanda() {
        List<ComandaPagamento> pagamentos = new ObterPagamentosComanda().obter(comanda.getCodigo());
        
        for (ComandaPagamento item : pagamentos) {
            totalPagoComanda.set(totalPagoComanda.get() + item.getValor());
        }
        
        comanda.setPago(totalPagoComanda.get() >= comanda.getTotal());
        comanda.setTotal(comanda.getTotal());
                
        new UpdateComanda().alterarComanda(comanda);
    }
    
    
    private void pagamentoComandaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagamentoComandaActionPerformed
        PagamentoComandaCliente pagamento = new PagamentoComandaCliente(comanda);
        pagamento.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        pagamento.setVisible(true);
        
        pagamento.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                pagamento.dispose();
            }
        });
        
        pagamento.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                List<ComandaPagamento> pagamentos = new ObterPagamentosComanda().obter(comanda.getCodigo());
                for (ComandaPagamento item : pagamentos) {
                    totalPagoComanda.set(totalPagoComanda.get() + item.getValor());
                }
                
                if(totalPagoComanda.get() >= comanda.getTotal()) {
                    comandaPaga.setBackground(new java.awt.Color(0, 153, 0));
                    comandaPaga.setForeground(new java.awt.Color(255, 255, 255));
                    comandaPaga.setText("PAGO");
                } else {
                    comandaPaga.setBackground(new java.awt.Color(204, 0, 0));
                    comandaPaga.setForeground(new java.awt.Color(255, 255, 255));
                    comandaPaga.setText("EM ABERTO");
                }
            }
        });
    }//GEN-LAST:event_pagamentoComandaActionPerformed

    private void totalComandaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalComandaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalComandaActionPerformed

    private void tabelaProdutosComandaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tabelaProdutosComandaPropertyChange
        AtomicReference<Double> totalDaComanda = new AtomicReference<>(0d);
        for (ComandaProduto item : itensProdutosComanda.itens) {
            totalDaComanda.set(totalDaComanda.get() + item.getSubtotal());
        }

        comanda.setTotal(totalDaComanda.get());
        totalComanda.setText(totalDaComanda.toString());
        
        atualizarComanda();
    }//GEN-LAST:event_tabelaProdutosComandaPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ComandaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ComandaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ComandaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ComandaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ComandaCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField codigoComanda;
    private javax.swing.JButton comandaPaga;
    private javax.swing.JLabel labelTotalComanda;
    private javax.swing.JButton pagamentoComanda;
    private javax.swing.JScrollPane painelProdutos;
    private javax.swing.JTable tabelaProdutosComanda;
    private javax.swing.JLabel tituloPaginaComanda;
    private javax.swing.JTextField totalComanda;
    // End of variables declaration//GEN-END:variables
}
